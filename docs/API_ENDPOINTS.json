{
  "api_info": {
    "name": "Map Memories API",
    "version": "1.0.0",
    "base_url": "http://localhost:8222/api/v1",
    "authentication": "Bearer Token (JWT)",
    "description": "API for managing map memories with locations, memories, and media"
  },
  "endpoints": {
    "authentication": {
      "register": {
        "method": "POST",
        "url": "/auth/register",
        "auth_required": false,
        "description": "Register a new user account",
        "request_body": {
          "username": "string (3-50 chars)",
          "email": "string (valid email)",
          "password": "string (min 6 chars)",
          "full_name": "string (optional)"
        },
        "response_code": 201,
        "response_format": "success_with_user_and_token"
      },
      "login": {
        "method": "POST",
        "url": "/auth/login",
        "auth_required": false,
        "description": "Authenticate user and get access token",
        "request_body": {
          "email": "string (valid email)",
          "password": "string"
        },
        "response_code": 200,
        "response_format": "success_with_user_and_token"
      },
      "profile": {
        "method": "GET",
        "url": "/auth/profile",
        "auth_required": true,
        "description": "Get current user's profile information",
        "response_code": 200,
        "response_format": "success_with_user"
      },
      "update_profile": {
        "method": "PUT",
        "url": "/auth/profile",
        "auth_required": true,
        "description": "Update current user's profile",
        "request_body": {
          "full_name": "string (optional)",
          "avatar_url": "string (optional)"
        },
        "response_code": 200,
        "response_format": "success_with_user"
      },
      "logout": {
        "method": "POST",
        "url": "/auth/logout",
        "auth_required": true,
        "description": "Logout current user (invalidate token)",
        "response_code": 200,
        "response_format": "success_only"
      }
    },
    "locations": {
      "get_all": {
        "method": "GET",
        "url": "/locations",
        "auth_required": false,
        "description": "Get paginated list of locations",
        "query_params": {
          "page": "integer (default: 1)",
          "limit": "integer (default: 20, max: 100)",
          "search": "string (search in name and description)",
          "country": "string (filter by country)",
          "city": "string (filter by city)"
        },
        "response_code": 200,
        "response_format": "paginated_locations"
      },
      "get_by_uuid": {
        "method": "GET",
        "url": "/locations/{uuid}",
        "auth_required": false,
        "description": "Get specific location details",
        "response_code": 200,
        "response_format": "success_with_location"
      },
      "search_nearby": {
        "method": "GET",
        "url": "/locations/nearby",
        "auth_required": false,
        "description": "Find locations within radius from coordinates",
        "query_params": {
          "latitude": "number (required, -90 to 90)",
          "longitude": "number (required, -180 to 180)",
          "radius": "number (default: 10, max: 100 km)",
          "limit": "integer (default: 20, max: 100)"
        },
        "response_code": 200,
        "response_format": "success_with_locations"
      },
      "get_memories": {
        "method": "GET",
        "url": "/locations/{uuid}/memories",
        "auth_required": false,
        "description": "Get all memories for a specific location",
        "query_params": {
          "page": "integer (default: 1)",
          "limit": "integer (default: 20, max: 100)",
          "is_public": "boolean (filter by public status)"
        },
        "response_code": 200,
        "response_format": "paginated_memories"
      },
      "create": {
        "method": "POST",
        "url": "/locations",
        "auth_required": true,
        "description": "Create a new location",
        "request_body": {
          "name": "string (required, max 255 chars)",
          "description": "string (optional)",
          "latitude": "number (required, -90 to 90)",
          "longitude": "number (required, -180 to 180)",
          "address": "string (optional)",
          "country": "string (optional)",
          "city": "string (optional)"
        },
        "response_code": 201,
        "response_format": "success_with_location"
      },
      "update": {
        "method": "PUT",
        "url": "/locations/{uuid}",
        "auth_required": true,
        "description": "Update location details",
        "request_body": {
          "name": "string (optional, max 255 chars)",
          "description": "string (optional)",
          "latitude": "number (optional, -90 to 90)",
          "longitude": "number (optional, -180 to 180)",
          "address": "string (optional)",
          "country": "string (optional)",
          "city": "string (optional)"
        },
        "response_code": 200,
        "response_format": "success_with_location"
      },
      "delete": {
        "method": "DELETE",
        "url": "/admin/locations/{uuid}",
        "auth_required": true,
        "admin_required": true,
        "description": "Delete a location (admin only)",
        "response_code": 200,
        "response_format": "success_only"
      }
    },
    "memories": {
      "get_all": {
        "method": "GET",
        "url": "/memories",
        "auth_required": false,
        "description": "Get paginated list of public memories",
        "query_params": {
          "page": "integer (default: 1)",
          "limit": "integer (default: 20, max: 100)",
          "search": "string (search in title and content)",
          "tags": "string (comma-separated tags)",
          "sort_by": "string (created_at, visit_date, title)",
          "sort_order": "string (asc, desc)"
        },
        "response_code": 200,
        "response_format": "paginated_memories"
      },
      "get_by_uuid": {
        "method": "GET",
        "url": "/memories/{uuid}",
        "auth_required": true,
        "description": "Get specific memory details",
        "response_code": 200,
        "response_format": "success_with_memory"
      },
      "create": {
        "method": "POST",
        "url": "/memories",
        "auth_required": true,
        "description": "Create a new memory",
        "request_body": {
          "title": "string (required, max 255 chars)",
          "content": "string (required)",
          "location_id": "integer (required)",
          "visit_date": "date (optional)",
          "is_public": "boolean (default: true)",
          "tags": ["string"]
        },
        "response_code": 201,
        "response_format": "success_with_memory"
      },
      "update": {
        "method": "PUT",
        "url": "/memories/{uuid}",
        "auth_required": true,
        "description": "Update memory (owner only)",
        "request_body": {
          "title": "string (optional, max 255 chars)",
          "content": "string (optional)",
          "visit_date": "date (optional)",
          "is_public": "boolean (optional)",
          "tags": ["string"]
        },
        "response_code": 200,
        "response_format": "success_with_memory"
      },
      "delete": {
        "method": "DELETE",
        "url": "/memories/{uuid}",
        "auth_required": true,
        "description": "Delete memory (owner only)",
        "response_code": 200,
        "response_format": "success_only"
      },
      "get_media": {
        "method": "GET",
        "url": "/memories/{uuid}/media",
        "auth_required": true,
        "description": "Get all media files for a memory",
        "response_code": 200,
        "response_format": "success_with_media_list"
      }
    },
    "media": {
      "get_all": {
        "method": "GET",
        "url": "/media",
        "auth_required": true,
        "description": "Get paginated list of media files",
        "query_params": {
          "memory_id": "integer (filter by memory)",
          "media_type": "string (image, video)",
          "page": "integer (default: 1)",
          "limit": "integer (default: 20, max: 100)"
        },
        "response_code": 200,
        "response_format": "paginated_media"
      },
      "get_by_uuid": {
        "method": "GET",
        "url": "/media/{uuid}",
        "auth_required": true,
        "description": "Get specific media file details",
        "response_code": 200,
        "response_format": "success_with_media"
      },
      "upload": {
        "method": "POST",
        "url": "/media/upload",
        "auth_required": true,
        "description": "Upload image or video file for a memory",
        "content_type": "multipart/form-data",
        "form_data": {
          "memory_id": "integer (required)",
          "file": "file (required, max 50MB)",
          "display_order": "integer (optional, default: 0)"
        },
        "supported_formats": ["JPEG", "PNG", "GIF", "MP4", "AVI", "MOV"],
        "response_code": 201,
        "response_format": "success_with_media"
      },
      "update": {
        "method": "PUT",
        "url": "/media/{uuid}",
        "auth_required": true,
        "description": "Update media display order (owner only)",
        "request_body": {
          "display_order": "integer (optional)"
        },
        "response_code": 200,
        "response_format": "success_with_media"
      },
      "delete": {
        "method": "DELETE",
        "url": "/media/{uuid}",
        "auth_required": true,
        "description": "Delete media file (owner only)",
        "response_code": 200,
        "response_format": "success_only"
      },
      "serve_file": {
        "method": "GET",
        "url": "/media/{uuid}/file",
        "auth_required": false,
        "description": "Serve the actual media file for viewing/download",
        "response_code": 200,
        "response_format": "file_content"
      }
    },
    "admin": {
      "get_all_memories": {
        "method": "GET",
        "url": "/admin/memories",
        "auth_required": true,
        "admin_required": true,
        "description": "Get all memories (admin can see private memories)",
        "query_params": {
          "page": "integer (default: 1)",
          "limit": "integer (default: 20, max: 100)",
          "search": "string (search in title and content)",
          "tags": "string (comma-separated tags)",
          "sort_by": "string (created_at, visit_date, title)",
          "sort_order": "string (asc, desc)"
        },
        "response_code": 200,
        "response_format": "paginated_memories"
      },
      "get_all_media": {
        "method": "GET",
        "url": "/admin/media",
        "auth_required": true,
        "admin_required": true,
        "description": "Get all media files (admin can see all media)",
        "query_params": {
          "memory_id": "integer (filter by memory)",
          "media_type": "string (image, video)",
          "page": "integer (default: 1)",
          "limit": "integer (default: 20, max: 100)"
        },
        "response_code": 200,
        "response_format": "paginated_media"
      }
    },
    "utility": {
      "health_check": {
        "method": "GET",
        "url": "/health",
        "auth_required": false,
        "description": "Check API health status",
        "response_code": 200,
        "response_format": "success_with_health_data"
      },
      "test_auth_header": {
        "method": "GET",
        "url": "/auth/test-header",
        "auth_required": false,
        "description": "Test endpoint for debugging authorization headers",
        "response_code": 200,
        "response_format": "success_with_auth_header_info"
      }
    }
  },
  "response_formats": {
    "success_only": {
      "success": true,
      "message": "string"
    },
    "success_with_user": {
      "success": true,
      "message": "string",
      "data": {
        "id": "integer",
        "uuid": "string",
        "username": "string",
        "email": "string",
        "full_name": "string",
        "avatar_url": "string",
        "created_at": "timestamp",
        "updated_at": "timestamp"
      }
    },
    "success_with_user_and_token": {
      "success": true,
      "message": "string",
      "data": {
        "user": "user_object",
        "access_token": "string",
        "token_type": "Bearer",
        "expires_in": "integer"
      }
    },
    "success_with_location": {
      "success": true,
      "message": "string",
      "data": {
        "id": "integer",
        "uuid": "string",
        "name": "string",
        "description": "string",
        "latitude": "number",
        "longitude": "number",
        "address": "string",
        "country": "string",
        "city": "string",
        "memory_count": "integer",
        "created_at": "timestamp",
        "updated_at": "timestamp"
      }
    },
    "success_with_locations": {
      "success": true,
      "message": "string",
      "data": ["location_objects"]
    },
    "paginated_locations": {
      "success": true,
      "message": "string",
      "data": ["location_objects"],
      "pagination": {
        "current_page": "integer",
        "per_page": "integer",
        "total": "integer",
        "total_pages": "integer",
        "has_next": "boolean",
        "has_prev": "boolean"
      }
    },
    "success_with_memory": {
      "success": true,
      "message": "string",
      "data": {
        "id": "integer",
        "uuid": "string",
        "title": "string",
        "content": "string",
        "visit_date": "date",
        "is_public": "boolean",
        "tags": ["string"],
        "like_count": "integer",
        "is_liked": "boolean",
        "media_count": "integer",
        "user": "user_object",
        "location": "location_object",
        "created_at": "timestamp",
        "updated_at": "timestamp"
      }
    },
    "success_with_memories": {
      "success": true,
      "message": "string",
      "data": ["memory_objects"]
    },
    "paginated_memories": {
      "success": true,
      "message": "string",
      "data": ["memory_objects"],
      "pagination": "pagination_object"
    },
    "success_with_media": {
      "success": true,
      "message": "string",
      "data": {
        "id": "integer",
        "uuid": "string",
        "filename": "string",
        "original_filename": "string",
        "file_path": "string",
        "file_size": "integer",
        "mime_type": "string",
        "media_type": "string",
        "display_order": "integer",
        "url": "string",
        "thumbnail_url": "string",
        "created_at": "timestamp"
      }
    },
    "success_with_media_list": {
      "success": true,
      "message": "string",
      "data": ["media_objects"]
    },
    "paginated_media": {
      "success": true,
      "message": "string",
      "data": ["media_objects"],
      "pagination": "pagination_object"
    },
    "success_with_health_data": {
      "success": true,
      "message": "string",
      "data": {
        "status": "string",
        "database": "string"
      }
    },
    "success_with_auth_header_info": {
      "success": true,
      "message": "string",
      "data": {
        "auth_header": "string",
        "has_bearer_prefix": "boolean",
        "header_length": "integer"
      }
    },
    "file_content": "binary_file_content"
  },
  "error_responses": {
    "400": {
      "success": false,
      "message": "Validation error",
      "error": {
        "code": "VALIDATION_ERROR",
        "message": "Field validation failed",
        "details": {
          "field_name": "error message"
        }
      }
    },
    "401": {
      "success": false,
      "message": "Authentication required",
      "error": {
        "code": "UNAUTHORIZED",
        "message": "Invalid or expired token"
      }
    },
    "403": {
      "success": false,
      "message": "Access denied",
      "error": {
        "code": "FORBIDDEN",
        "message": "You don't have permission to access this resource"
      }
    },
    "404": {
      "success": false,
      "message": "Resource not found",
      "error": {
        "code": "NOT_FOUND",
        "message": "The requested resource was not found"
      }
    },
    "409": {
      "success": false,
      "message": "Resource conflict",
      "error": {
        "code": "CONFLICT",
        "message": "Resource already exists"
      }
    },
    "413": {
      "success": false,
      "message": "File too large",
      "error": {
        "code": "FILE_TOO_LARGE",
        "message": "File size exceeds maximum limit of 50MB"
      }
    },
    "500": {
      "success": false,
      "message": "Internal server error",
      "error": {
        "code": "INTERNAL_ERROR",
        "message": "An unexpected error occurred"
      }
    }
  },
  "authentication": {
    "type": "JWT Bearer Token",
    "header": "Authorization: Bearer <token>",
    "token_expiry": "24 hours",
    "refresh_mechanism": "Re-login required"
  },
  "file_upload": {
    "max_size": "50MB",
    "supported_formats": {
      "images": ["JPEG", "PNG", "GIF"],
      "videos": ["MP4", "AVI", "MOV"]
    },
    "content_type": "multipart/form-data"
  },
  "pagination": {
    "default_page": 1,
    "default_limit": 20,
    "max_limit": 100
  },
  "development": {
    "swagger_url": "http://localhost:8222/swagger/index.html",
    "default_admin": {
      "username": "admin",
      "password": "admin",
      "email": "admin@map-memories.com"
    }
  }
} 
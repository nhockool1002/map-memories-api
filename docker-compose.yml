version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgis/postgis:15-3.3
    container_name: mm_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: map_memories
      POSTGRES_USER: mm_user
      POSTGRES_PASSWORD: mm_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - mm_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mm_user -d map_memories"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Go API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mm_api
    restart: unless-stopped
    environment:
      - ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=mm_user
      - DB_PASSWORD=mm_password
      - DB_NAME=map_memories
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - PORT=8080
      - UPLOAD_PATH=/app/uploads
      - MAX_FILE_SIZE=50MB
    ports:
      - "8080:8080"
    volumes:
      - uploads_data:/app/uploads
    networks:
      - mm_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: mm_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mm_network
    command: redis-server --appendonly yes

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: mm_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - mm_network
    depends_on:
      - api

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
  redis_data:
    driver: local

networks:
  mm_network:
    driver: bridge